(this.webpackJsonp=this.webpackJsonp||[]).push([[9],{"M5+u":function(t,s,i){"use strict";var n=i("q1tI"),o=i.n(n),e=i("dec9"),a=i("OMM4"),p=i("KQm4"),m="<span>\ne<sub>t,i</sub> = f<sub>att</sub>(s<sub>t-1</sub>, h<sub>i</sub>)\n</span>\n",b="<span>\nh<sub>t</sub> = f<sub>W</sub>(x<sub>t</sub>, h<sub>t-1</sub>)\n</span>",u='<span>\nc<sub>t</sub> = <span style="font-size: 26px">∑<sub>i</sub></span> a<sub>t,i</sub>h<sub>i</sub>\n</span>',r="<span>\ns<sub>t</sub> = g<sub>U</sub>(y<sub>t-1</sub>, s<sub>t-1</sub>, c<sub>t</sub>)\n</span>",l={inputs:{color:"#FFD199",borderColor:"#A35A00",size:"50px",blockName:"inputs",blockType:"rect",items:[{id:"x1",val:"<span>\n          x<sub>1</sub>\n        </span>",name:"We",position:[12,400]},{id:"x2",val:"<span>\n          x<sub>2</sub>\n        </span>",name:"are",position:[96,400]},{id:"x3",val:"<span>\n          x<sub>3</sub>\n        </span>",name:"learning",position:[192,400]},{id:"x4",val:"<span>\n          x<sub>4</sub>\n        </span>",name:"attention",position:[288,400]}]},attention:{color:"#E2CFC4",borderColor:"#523828",size:"50px",blockName:"attention",blockType:"rect",items:[]},hidden:{color:"#9BF6FF",borderColor:"#00838F",size:"50px",blockName:"hidden",blockType:"rect",items:[{id:"h1",val:"<span>\n          h<sub>1</sub>\n        </span>",tooltipValue:b,position:[12,500*(.8-.2)],lines:[{from:[37,400],to:[37,500*(.8-.2)+50]}]},{id:"h2",val:"<span>\n          h<sub>2</sub>\n        </span>",tooltipValue:b,position:[96,500*(.8-.2)],lines:[{from:[121,400],to:[121,500*(.8-.2)+50]},{from:[62,500*(.8-.2)+25],to:[96,500*(.8-.2)+25]}]},{id:"h3",val:"<span>\n          h<sub>3</sub>\n        </span>",tooltipValue:b,position:[192,500*(.8-.2)],lines:[{from:[217,400],to:[217,500*(.8-.2)+50]},{from:[146,500*(.8-.2)+25],to:[192,500*(.8-.2)+25]}]},{id:"h4",val:"<span>\n          h<sub>4</sub>\n        </span>",tooltipValue:b,position:[288,500*(.8-.2)],lines:[{from:[313,400],to:[313,500*(.8-.2)+50]},{from:[242,500*(.8-.2)+25],to:[288,500*(.8-.2)+25]}]}]},state:{color:"#FDFFB6",borderColor:"#636600",size:"50px",blockName:"state",blockType:"rect",items:[{id:"s0",val:"<span>\n          s<sub>0</sub>\n        </span>",tooltipValue:"\n          <span>\n          <strong>Initial decoder state</strong>\n          </span>\n        ",position:[480,500*(.8-.2)],lines:[{from:[338,500*(.8-.2)+25],to:[480,500*(.8-.2)+25],orientation:"horizontal"}]}]},context:{color:"#FFADAD",borderColor:"#660000",size:"50px",blockName:"context",blockType:"rect",items:[]},output:{color:"#CAFFBF",borderColor:"#147A00",size:"50px",blockName:"output",blockType:"rect",items:[]},text:{color:"#CAFFBF",borderColor:"#333",sizeX:"300px",sizeY:"50px",blockName:"text",blockType:"text",items:[]},softmax:{color:"#CAFFBF",borderColor:"#333",sizeX:352,sizeY:"25px",blockName:"softmax",blockType:"text",items:[]},operations:{color:"#E2E2DF",borderColor:"#40403A",size:"16px",blockName:"operations",blockType:"circle",items:[]}},c=Object.assign({},l,{attention:Object.assign({},l.attention,{items:[].concat(Object(p.a)(l.attention.items),[{id:"e11",val:"<span>\n          e<sub>1,1</sub>\n        </span>",tooltipValue:m,position:[12,200],lines:[{from:[l.state.items[0].position[0]+25,l.state.items[0].position[1]],points:[[l.state.items[0].position[0]+25,l.state.items[0].position[1]-25],[12+100/3,l.state.items[0].position[1]-25]],to:[12+100/3,250],orientation:"multi-squared"},{from:[l.hidden.items[0].position[0]+25,l.hidden.items[0].position[1]],to:[12+50/3,250]}]},{id:"e12",val:"<span>\n          e<sub>1,2</sub>\n        </span>",tooltipValue:m,position:[96,200],lines:[{from:[l.state.items[0].position[0]+25,l.state.items[0].position[1]],points:[[l.state.items[0].position[0]+25,l.state.items[0].position[1]-25],[96+100/3,l.state.items[0].position[1]-25]],to:[96+100/3,250],orientation:"multi-squared"},{from:[l.hidden.items[1].position[0]+25,l.hidden.items[1].position[1]],to:[96+50/3,250]}]},{id:"e13",val:"<span>\n          e<sub>1,3</sub>\n        </span>",tooltipValue:m,position:[192,200],lines:[{from:[l.state.items[0].position[0]+25,l.state.items[0].position[1]],points:[[l.state.items[0].position[0]+25,l.state.items[0].position[1]-25],[192+100/3,l.state.items[0].position[1]-25]],to:[192+100/3,250],orientation:"multi-squared"},{from:[l.hidden.items[2].position[0]+25,l.hidden.items[2].position[1]],to:[192+50/3,250]}]},{id:"e14",val:"<span>\n          e<sub>1,4</sub>\n        </span>",tooltipValue:m,position:[288,200],lines:[{from:[l.state.items[0].position[0]+25,l.state.items[0].position[1]],points:[[l.state.items[0].position[0]+25,l.state.items[0].position[1]-25],[288+100/3,l.state.items[0].position[1]-25]],to:[288+100/3,250],orientation:"multi-squared"},{from:[l.hidden.items[3].position[0]+25,l.hidden.items[3].position[1]],to:[288+50/3,250]}]}])}),text:Object.assign({},l.text,{items:[].concat(Object(p.a)(l.text.items),[{id:"alignment-scores",val:"<span>\n<strong>Alignment scores</strong><br/>\ne<sub>t,i</sub> = f<sub>att</sub>(s<sub>t-1</sub>, h<sub>i</sub>) [scalar]<br/>\nf<sub>att</sub> is a MLP\n</span>\n",sizeX:"250px",sizeY:"100px",position:[384,500*(.8-.6)+60]}])})}),x=Object.assign({},c,{softmax:Object.assign({},c.softmax,{items:[].concat(Object(p.a)(c.softmax.items),[{id:"softmax-layer",val:"<span>\n          softmax\n        </span>",position:[0,500*(.8-.5)],lines:[{from:[c.attention.items[0].position[0]+25,c.attention.items[0].position[1]],to:[c.attention.items[0].position[0]+25,500*(.8-.5)+25]},{from:[c.attention.items[1].position[0]+25,c.attention.items[1].position[1]],to:[c.attention.items[1].position[0]+25,500*(.8-.5)+25]},{from:[c.attention.items[2].position[0]+25,c.attention.items[2].position[1]],to:[c.attention.items[2].position[0]+25,500*(.8-.5)+25]},{from:[c.attention.items[3].position[0]+25,c.attention.items[3].position[1]],to:[c.attention.items[3].position[0]+25,500*(.8-.5)+25]}]}])})}),g=Object.assign({},x,{attention:Object.assign({},x.attention,{items:[].concat(Object(p.a)(x.attention.items),[{id:"a11",val:"<span>\n          a<sub>1,1</sub>\n        </span>",position:[12,500*(.8-.65)],lines:[{from:[x.softmax.items[0].position[0]+37.5,x.softmax.items[0].position[1]],to:[37,500*(.8-.65)+50]}]},{id:"a12",val:"<span>\n          a<sub>1,2</sub>\n        </span>",position:[96,500*(.8-.65)],lines:[{from:[x.softmax.items[0].position[0]+37.5+.07*1200,x.softmax.items[0].position[1]],to:[121,500*(.8-.65)+50]}]},{id:"a13",val:"<span>\n          a<sub>1,3</sub>\n        </span>",position:[192,500*(.8-.65)],lines:[{from:[x.softmax.items[0].position[0]+50+.14*1200,x.softmax.items[0].position[1]],to:[217,500*(.8-.65)+50]}]},{id:"a14",val:"<span>\n          a<sub>1,4</sub>\n        </span>",position:[288,500*(.8-.65)],lines:[{from:[x.softmax.items[0].position[0]+60+.07*3*1200,x.softmax.items[0].position[1]],to:[313,500*(.8-.65)+50]}]}])}),text:Object.assign({},x.text,{items:[].concat(Object(p.a)(x.text.items),[{id:"attention-weights",val:'<span>\n<strong>Attention weights</strong><br/>\n<span style="font-size: 14px" >Normalized alignment socres with softmax funtion</span><br/>\n0 < a<sub>t,i,j</sub> < 1 &nbsp; &nbsp; ∑<sub>i,j</sub>a<sub>t,i,j</sub> = 1<br/>\n</span>\n',sizeX:"350px",sizeY:"100px",position:[384,45.00000000000002]}])})}),d=Object.assign({},g,{operations:Object.assign({},g.operations,{items:[].concat(Object(p.a)(g.operations.items),[{id:"mul11",val:"<span>\n          <strong>X</strong>\n        </span>",position:[37,500*(.8-.75)],lines:[{from:[g.attention.items[4].position[0]+25,g.attention.items[4].position[1]],to:[37,41.00000000000002]},{from:[g.hidden.items[0].position[0],g.hidden.items[0].position[1]+50/6],points:[[2,266],[2,500*(.8-.7)+16]],to:[20,500*(.8-.75)],orientation:"multi-curved"}]}])}),text:Object.assign({},g.text,{items:[].concat(Object(p.a)(g.text.items),[{id:"mul-text",val:'<span  style="font-size: 14px; line-height: 16px; padding-left: 5px;">Multiply attention weight and corresponding hidden state\n</span>\n',sizeX:"220px",sizeY:"50px",position:[g.attention.items[5].position[0]-30,g.attention.items[5].position[1]-75]}])})}),j=Object.assign({},d,{operations:Object.assign({},d.operations,{items:[].concat(Object(p.a)(d.operations.items),[{id:"mul12",val:"<span>\n          <strong>X</strong>\n        </span>",position:[121,500*(.8-.75)],lines:[{from:[d.attention.items[5].position[0]+25,d.attention.items[5].position[1]],to:[121,41.00000000000002]},{from:[d.hidden.items[1].position[0],d.hidden.items[1].position[1]+50/6],points:[[80,266],[80,500*(.8-.7)+16]],to:[104,500*(.8-.75)],orientation:"multi-curved"}]},{id:"mul13",val:"<span>\n          <strong>X</strong>\n        </span>",position:[217,500*(.8-.75)],lines:[{from:[d.attention.items[6].position[0]+25,d.attention.items[6].position[1]],to:[217,41.00000000000002]},{from:[d.hidden.items[2].position[0],d.hidden.items[2].position[1]+50/6],points:[[176,266],[176,500*(.8-.7)+16]],to:[200,500*(.8-.75)],orientation:"multi-curved"}]},{id:"mul14",val:"<span>\n          <strong>X</strong>\n        </span>",position:[313,500*(.8-.75)],lines:[{from:[d.attention.items[7].position[0]+25,d.attention.items[7].position[1]],to:[313,41.00000000000002]},{from:[d.hidden.items[3].position[0],d.hidden.items[3].position[1]+50/6],points:[[272,266],[272,500*(.8-.7)+16]],to:[296,500*(.8-.75)],orientation:"multi-curved"}]}])}),text:Object.assign({},g.text,{items:[g.text.items[0],g.text.items[1]]})}),O=Object.assign({},j,{operations:Object.assign({},j.operations,{items:[].concat(Object(p.a)(j.operations.items),[{id:"sum",val:"<span>\n          <strong>+</strong>\n        </span>",tooltipValue:u,position:[576,125],lines:[{from:[j.operations.items[0].position[0],j.operations.items[0].position[1]-16],points:[[j.operations.items[0].position[0],j.operations.items[0].position[1]-16-5],[576,j.operations.items[0].position[1]-16-5]],to:[576,109],orientation:"multi-squared"},{from:[j.operations.items[1].position[0],j.operations.items[1].position[1]-16],points:[[j.operations.items[1].position[0],j.operations.items[1].position[1]-16-5],[576,j.operations.items[0].position[1]-16-5]],to:[576,109],orientation:"multi-squared"},{from:[j.operations.items[2].position[0],j.operations.items[2].position[1]-16],points:[[j.operations.items[2].position[0],j.operations.items[2].position[1]-16-5],[576,j.operations.items[0].position[1]-16-5]],to:[576,109],orientation:"multi-squared"},{from:[j.operations.items[3].position[0],j.operations.items[3].position[1]-16],points:[[j.operations.items[3].position[0],j.operations.items[3].position[1]-16-5],[576,j.operations.items[0].position[1]-16-5]],to:[576,109],orientation:"multi-squared"}]}])}),text:Object.assign({},g.text,{items:[Object.assign({},g.text.items[0],{sizeX:"170px",sizeY:"40px",val:"<span>\n<strong>Alignment scores</strong>\n</span>\n",position:[g.text.items[0].position[0]-10,g.text.items[0].position[1]+40]}),Object.assign({},g.text.items[1],{sizeX:"170px",sizeY:"40px",val:"<span>\n<strong>Attention weights</strong>\n</span>\n",position:[g.text.items[1].position[0]-10,g.text.items[1].position[1]+40]}),{id:"sum-text",sizeX:"300px",sizeY:"100px",val:'<span>\nCompute <strong>context vector</strong><br/>\nc<sub>t</sub> = <span style="font-size: 26px">∑</span><sub>i</sub> a<sub>t,i</sub>h<sub>i</sub>\n</span>\n',position:[g.text.items[1].position[0]+250,g.text.items[1].position[1]]}]})}),f=Object.assign({},O,{state:Object.assign({},O.state,{items:[].concat(Object(p.a)(O.state.items),[{id:"s1",val:"<span>\n          s<sub>1</sub>\n        </span>",tooltipValue:r,position:[672,500*(.8-.2)],lines:[{from:[O.state.items[0].position[0]+50,O.state.items[0].position[1]+25],to:[672,500*(.8-.2)+25],orientation:"horizontal"},{from:[672-50/3,400],to:[672+50/6,500*(.8-.2)+50]},{from:[722,400],to:[672+100/3,500*(.8-.2)+50]}]}])}),context:Object.assign({},O.context,{items:[].concat(Object(p.a)(O.context.items),[{id:"c1",val:"<span>\n          c<sub>1</sub>\n        </span>",tooltipValue:u,position:[622,400],lines:[{from:[O.operations.items[4].position[0],O.operations.items[4].position[1]+16],to:[672-100/3,400],orientation:"vertical"}]}])}),output:Object.assign({},O.output,{items:[].concat(Object(p.a)(O.output.items),[{id:"y0",val:"<span>\n          y<sub>0</sub>\n        </span>",name:"[START]",position:[697,400]}])})}),v=Object.assign({},f,{output:Object.assign({},f.output,{items:[].concat(Object(p.a)(f.output.items),[{id:"y1-o",val:"<span>\n          y<sub>1</sub>\n        </span>",name:"uczymy",namePosition:"top",position:[672,200],lines:[{from:[f.state.items[1].position[0]+25,f.state.items[1].position[1]],to:[697,250]}]}])}),text:Object.assign({},f.text,{items:[f.text.items[0],f.text.items[1],Object.assign({},f.text.items[2],{val:'<span>\n<strong>Intuition!</strong><br/>\n<strong>Context c<sub>t</sub></strong> <u>attends</u> to the part of the input relevant to state:<br/>\n"uczymy" gives the most attention to "learning", some less to "we" (in polish the form of verb imply the person) and "are"<br/>\nproposed weights: \na<sub>1,1</sub> = 0.4; a<sub>1,2</sub> = 0.19; a<sub>1,3</sub> = 0.4; a<sub>1,4</sub> = 0.01;  \n</span>\n',sizeX:"550",sizeY:"150",position:[f.text.items[2].position[0],f.text.items[2].position[1]-50+10]})]})}),h=Object.assign({},v,{context:Object.assign({},v.context,{items:[{id:"c1",val:"<span>\n          c<sub>1</sub>\n        </span>",tooltipValue:u,position:[622,400]}]}),attention:Object.assign({},v.attention,{items:[Object.assign({},v.attention.items[0],{val:"<span>\n          e<sub>2,1</sub>\n        </span>",lines:[{from:[v.state.items[1].position[0]+50/3,v.state.items[1].position[1]],points:[[v.state.items[1].position[0]+50/3,v.state.items[1].position[1]-25],[12+100/3,v.state.items[1].position[1]-25]],to:[12+100/3,250],orientation:"multi-squared"},v.attention.items[0].lines[1]]}),Object.assign({},v.attention.items[1],{val:"<span>\n          e<sub>2,2</sub>\n        </span>",lines:[{from:[v.state.items[1].position[0]+50/3,v.state.items[1].position[1]],points:[[v.state.items[1].position[0]+50/3,v.state.items[1].position[1]-25],[96+100/3,v.state.items[1].position[1]-25]],to:[96+100/3,250],orientation:"multi-squared"},v.attention.items[1].lines[1]]}),Object.assign({},v.attention.items[2],{val:"<span>\n          e<sub>2,3</sub>\n        </span>",lines:[{from:[v.state.items[1].position[0]+50/3,v.state.items[1].position[1]],points:[[v.state.items[1].position[0]+50/3,v.state.items[1].position[1]-25],[192+100/3,v.state.items[1].position[1]-25]],to:[192+100/3,250],orientation:"multi-squared"},v.attention.items[2].lines[1]]}),Object.assign({},v.attention.items[3],{val:"<span>\n          e<sub>2,4</sub>\n        </span>",lines:[{from:[v.state.items[1].position[0]+50/3,v.state.items[1].position[1]],points:[[v.state.items[1].position[0]+50/3,v.state.items[1].position[1]-25],[288+100/3,v.state.items[1].position[1]-25]],to:[288+100/3,250],orientation:"multi-squared"},v.attention.items[3].lines[1]]}),Object.assign({},v.attention.items[4],{val:"<span>\n          a<sub>2,1</sub>\n        </span>"}),Object.assign({},v.attention.items[5],{val:"<span>\n          a<sub>2,2</sub>\n        </span>"}),Object.assign({},v.attention.items[6],{val:"<span>\n          a<sub>2,3</sub>\n        </span>"}),Object.assign({},v.attention.items[7],{val:"<span>\n          a<sub>2,4</sub>\n        </span>"})]}),text:Object.assign({},v.text,{items:[v.text.items[0],v.text.items[1],Object.assign({},v.text.items[2],{val:"<span>Calculate new attention weights for given state <strong>s<sub>1</sub></strong> (t = 2)</span>",sizeX:"550",sizeY:"50",position:[v.text.items[2].position[0],v.text.items[2].position[1]+50]})]})}),z=Object.assign({},h,{context:Object.assign({},h.context,{items:[].concat(Object(p.a)(h.context.items),[{id:"c2",val:"<span>\n          c<sub>2</sub>\n        </span>",tooltipValue:u,position:[768,400],lines:[{from:[O.operations.items[4].position[0],O.operations.items[4].position[1]+16],points:[[576,485],[793,485]],to:[793,450],orientation:"multi-squared"}]}])}),text:Object.assign({},h.text,{items:[h.text.items[0],h.text.items[1],Object.assign({},h.text.items[2],{val:'<span>\n<strong>Intuition!</strong><br/>\n<strong>Context c<sub>t</sub></strong> <u>attends</u> to the part of the input relevant to state:<br/>\n"się" gives the most attention to "we" and "are", some less to "learning" (it\'s complicated in polish)<br/>\nproposed weights: \na<sub>1,1</sub> = 0.35; a<sub>1,2</sub> = 0.35; a<sub>1,3</sub> = 0.29; a<sub>1,4</sub> = 0.01;  \n</span>\n',sizeX:"550",sizeY:"150",position:[h.text.items[2].position[0],h.text.items[2].position[1]-50]})]})}),y=Object.assign({},z,{state:Object.assign({},z.state,{items:[].concat(Object(p.a)(z.state.items),[{id:"s2",val:"<span>\n          s<sub>2</sub>\n        </span>",tooltipValue:r,position:[793,500*(.8-.2)],lines:[{from:[z.state.items[1].position[0]+50,z.state.items[1].position[1]+25],to:[793,500*(.8-.2)+25],orientation:"horizontal"},{from:[z.context.items[1].position[0]+25,z.context.items[1].position[1]],to:[805.5,500*(.8-.2)+50]},{from:[868,400],to:[768+100/3+25,500*(.8-.2)+50]}]}])}),output:Object.assign({},z.output,{items:[].concat(Object(p.a)(z.output.items),[{id:"y1",val:"<span>\n          y<sub>1</sub>\n        </span>",name:"uczymy",position:[843,400]},{id:"y2-o",val:"<span>\n          y<sub>2</sub>\n        </span>",name:"się",namePosition:"top",position:[793,200],lines:[{from:[818,500*(.8-.2)],to:[818,250]}]}])})}),q=Object.assign({},y,{context:Object.assign({},y.context,{items:[y.context.items[0],Object.assign({},y.context.items[1],{lines:[]})]}),attention:Object.assign({},y.attention,{items:[Object.assign({},y.attention.items[0],{val:"<span>\n            e<sub>3,1</sub>\n          </span>",lines:[{from:[y.state.items[2].position[0]+50/3,y.state.items[2].position[1]],points:[[y.state.items[2].position[0]+50/3,y.state.items[2].position[1]-25],[12+100/3,y.state.items[2].position[1]-25]],to:[12+100/3,250],orientation:"multi-squared"},y.attention.items[0].lines[1]]}),Object.assign({},y.attention.items[1],{val:"<span>\n              e<sub>3,2</sub>\n            </span>",lines:[{from:[y.state.items[2].position[0]+50/3,y.state.items[2].position[1]],points:[[y.state.items[2].position[0]+50/3,y.state.items[2].position[1]-25],[96+100/3,y.state.items[2].position[1]-25]],to:[96+100/3,250],orientation:"multi-squared"},y.attention.items[1].lines[1]]}),Object.assign({},y.attention.items[2],{val:"<span>\n              e<sub>3,3</sub>\n            </span>",lines:[{from:[y.state.items[2].position[0]+50/3,y.state.items[2].position[1]],points:[[y.state.items[2].position[0]+50/3,y.state.items[2].position[1]-25],[192+100/3,y.state.items[2].position[1]-25]],to:[192+100/3,250],orientation:"multi-squared"},y.attention.items[2].lines[1]]}),Object.assign({},y.attention.items[3],{val:"<span>\n              e<sub>3,4</sub>\n            </span>",lines:[{from:[y.state.items[2].position[0]+50/3,y.state.items[2].position[1]],points:[[y.state.items[2].position[0]+50/3,y.state.items[2].position[1]-25],[288+100/3,y.state.items[2].position[1]-25]],to:[288+100/3,250],orientation:"multi-squared"},y.attention.items[3].lines[1]]}),Object.assign({},y.attention.items[4],{val:"<span>\n          a<sub>3,1</sub>\n        </span>"}),Object.assign({},y.attention.items[5],{val:"<span>\n              a<sub>3,2</sub>\n            </span>"}),Object.assign({},y.attention.items[6],{val:"<span>\n              a<sub>3,3</sub>\n            </span>"}),Object.assign({},y.attention.items[7],{val:"<span>\n              a<sub>3,4</sub>\n            </span>"})]}),text:Object.assign({},y.text,{items:[y.text.items[0],y.text.items[1],Object.assign({},y.text.items[2],{val:"<span>Calculate new attention weights for given state <strong>s<sub>2</sub></strong> (t = 3)</span>",sizeX:"550",sizeY:"50",position:[y.text.items[2].position[0],y.text.items[2].position[1]+50]})]})}),w=Object.assign({},q,{context:Object.assign({},q.context,{items:[].concat(Object(p.a)(q.context.items),[{id:"c3",val:"<span>\n          c<sub>3</sub>\n        </span>",tooltipValue:u,position:[910,400],lines:[{from:[q.operations.items[4].position[0],q.operations.items[4].position[1]+16],points:[[576,485],[935,485]],to:[935,450],orientation:"multi-squared"}]}])}),text:Object.assign({},q.text,{items:[q.text.items[0],q.text.items[1],Object.assign({},q.text.items[2],{val:'<span>\n<strong>Intuition!</strong><br/>\n<strong>Context c<sub>t</sub></strong> <u>attends</u> to the part of the input relevant to state:<br/>\n"attention" ~ "uwagi"<br/>\nproposed weights: \na<sub>1,1</sub> = 0.05; a<sub>1,2</sub> = 0.01; a<sub>1,3</sub> = 0.05; a<sub>1,4</sub> = 0.89;  \n</span>\n',sizeX:"550",sizeY:"150",position:[q.text.items[2].position[0],q.text.items[2].position[1]-50]})]})}),F=Object.assign({},w,{state:Object.assign({},w.state,{items:[].concat(Object(p.a)(w.state.items),[{id:"s3",val:"<span>\n          s<sub>3</sub>\n        </span>",tooltipValue:r,position:[939,500*(.8-.2)],lines:[{from:[w.state.items[2].position[0]+50,w.state.items[2].position[1]+25],to:[939,500*(.8-.2)+25],orientation:"horizontal"},{from:[w.context.items[2].position[0]+25,w.context.items[2].position[1]],to:[951.5,500*(.8-.2)+50]},{from:[1014,400],to:[864+100/3+75,500*(.8-.2)+50]}]}])}),output:Object.assign({},w.output,{items:[].concat(Object(p.a)(w.output.items),[{id:"y2",val:"<span>\n          y<sub>2</sub>\n        </span>",name:"się",position:[989,400]},{id:"y3-o",val:"<span>\n          y<sub>3</sub>\n        </span>",name:"uwagi",namePosition:"top",position:[939,200],lines:[{from:[964,500*(.8-.2)],to:[964,250]}]}])})}),k=Object.assign({},F,{context:Object.assign({},F.context,{items:[F.context.items[0],F.context.items[1],Object.assign({},F.context.items[2],{lines:[]})]}),attention:Object.assign({},F.attention,{items:[Object.assign({},F.attention.items[0],{val:"<span>\n            e<sub>4,1</sub>\n          </span>",lines:[{from:[F.state.items[3].position[0]+50/3,F.state.items[3].position[1]],points:[[F.state.items[3].position[0]+50/3,F.state.items[3].position[1]-25],[12+100/3,F.state.items[3].position[1]-25]],to:[12+100/3,250],orientation:"multi-squared"},F.attention.items[0].lines[1]]}),Object.assign({},F.attention.items[1],{val:"<span>\n              e<sub>4,2</sub>\n            </span>",lines:[{from:[F.state.items[3].position[0]+50/3,F.state.items[3].position[1]],points:[[F.state.items[3].position[0]+50/3,F.state.items[3].position[1]-25],[96+100/3,F.state.items[3].position[1]-25]],to:[96+100/3,250],orientation:"multi-squared"},F.attention.items[1].lines[1]]}),Object.assign({},F.attention.items[2],{val:"<span>\n              e<sub>4,3</sub>\n            </span>",lines:[{from:[F.state.items[3].position[0]+50/3,F.state.items[3].position[1]],points:[[F.state.items[3].position[0]+50/3,F.state.items[3].position[1]-25],[192+100/3,F.state.items[3].position[1]-25]],to:[192+100/3,250],orientation:"multi-squared"},F.attention.items[2].lines[1]]}),Object.assign({},F.attention.items[3],{val:"<span>\n              e<sub>4,4</sub>\n            </span>",lines:[{from:[F.state.items[3].position[0]+50/3,F.state.items[3].position[1]],points:[[F.state.items[3].position[0]+50/3,F.state.items[3].position[1]-25],[288+100/3,F.state.items[3].position[1]-25]],to:[288+100/3,250],orientation:"multi-squared"},F.attention.items[3].lines[1]]}),Object.assign({},F.attention.items[4],{val:"<span>\n          a<sub>4,1</sub>\n        </span>"}),Object.assign({},F.attention.items[5],{val:"<span>\n              a<sub>4,2</sub>\n            </span>"}),Object.assign({},F.attention.items[6],{val:"<span>\n              a<sub>4,3</sub>\n            </span>"}),Object.assign({},F.attention.items[7],{val:"<span>\n              a<sub>4,4</sub>\n            </span>"})]}),text:Object.assign({},F.text,{items:[F.text.items[0],F.text.items[1],Object.assign({},F.text.items[2],{val:"<span>Calculate new attention weights for given state <strong>s<sub>3</sub></strong> (t = 4)</span>",sizeX:"550",sizeY:"50",position:[F.text.items[2].position[0],F.text.items[2].position[1]+50]})]})}),C=Object.assign({},k,{context:Object.assign({},k.context,{items:[].concat(Object(p.a)(k.context.items),[{id:"c4",val:"<span>\n          c<sub>4</sub>\n        </span>",tooltipValue:u,position:[1056,400],lines:[{from:[k.operations.items[4].position[0],k.operations.items[4].position[1]+16],points:[[576,485],[1081,485]],to:[1081,450],orientation:"multi-squared"}]}])})}),V={step1:l,step2:c,step3:x,step4:g,step5:d,step6:j,step7:O,step8:f,step9:v,step10:h,step11:z,step12:y,step13:q,step14:w,step15:F,step16:k,step17:C,step18:Object.assign({},C,{state:Object.assign({},C.state,{items:[].concat(Object(p.a)(C.state.items),[{id:"s4",val:"<span>\n          s<sub>4</sub>\n        </span>",tooltipValue:r,position:[1081,500*(.8-.2)],lines:[{from:[C.state.items[3].position[0]+50,C.state.items[3].position[1]+25],to:[1081,500*(.8-.2)+25],orientation:"horizontal"},{from:[C.context.items[3].position[0]+25,C.context.items[3].position[1]],to:[1093.5,500*(.8-.2)+50]},{from:[1156,400],to:[1056+100/3+25,500*(.8-.2)+50]}]}])}),output:Object.assign({},C.output,{items:[].concat(Object(p.a)(C.output.items),[{id:"y3",val:"<span>\n          y<sub>3</sub>\n        </span>",name:"uwagi",position:[1131,400]},{id:"y4-o",val:"<span>\n          y<sub>4</sub>\n        </span>",name:"[STOP]",namePosition:"top",position:[1081,200],lines:[{from:[1106,500*(.8-.2)],to:[1106,250]}]}])}),text:Object.assign({},C.text,{items:[C.text.items[0],F.text.items[1],Object.assign({},C.text.items[2],{val:'<span style="padding: 0 10px">We\'re not using the fact that <b><i>h</i></b> vector is an ordered sequence. It is used as unordered set instead. To solve this we have to add a <strong>positional encoding</strong> to each element</span>',sizeX:"550",sizeY:"120",position:[C.text.items[2].position[0],C.text.items[2].position[1]-50]})]})})},X=i("UPm1"),Y=i.n(X);s.a=function(){var t=Object(n.useState)(1),s=t[0],i=t[1],p=V["step"+s];return o.a.createElement("div",{className:Y.a["rnn-continaer"]},o.a.createElement(e.a,{data:p,step:s,animationHeight:500,animationWidth:1200,id:"rnn-with-attention"}),o.a.createElement(a.a,{onStepForward:function(){i(s+1)},onStepBackward:function(){i(s-1)},prevDisabled:s<2,nextDisabled:s===Object.keys(V).length}))}},UPm1:function(t,s,i){t.exports={"rnn-continaer":"RNNWithAttention-module--rnn-continaer--3t_Yo"}}}]);
//# sourceMappingURL=d2748fff3a31096fc3a2024c73a7f219f2232c61-499c69f8109e48770e88.js.map