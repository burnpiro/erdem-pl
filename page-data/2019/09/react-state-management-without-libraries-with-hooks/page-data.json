{"componentChunkName":"component---src-templates-post-template-js","path":"/2019/09/react-state-management-without-libraries-with-hooks","webpackCompilationHash":"d373f8e6347303c2c647","result":{"data":{"markdownRemark":{"fields":{"slug":"/2019/09/react-state-management-without-libraries-with-hooks","tagSlugs":["/tag/libraries/","/tag/javascript/","/tag/react/","/tag/state/"],"readTime":{"text":"16 min read","minutes":15.6}},"frontmatter":{"description":"How to manage state without any external libraries in React? Structure and implementation of state manager for small and middle size apps with hooks.","tags":["Libraries","Javascript","React","State"],"date":"2019-09-06","title":"React - state management without libraries (with hooks)"},"html":"<blockquote>\n<p>It might be beneficial to have CodeSandbox editor opened when reading this blog post.</p>\n</blockquote>\n<iframe src=\"https://codesandbox.io/embed/crimson-leftpad-07vke?fontsize=14\" title=\"crimson-leftpad-07vke\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"why-dont-you-want-to-use-state-manager-anyway\"><a href=\"#why-dont-you-want-to-use-state-manager-anyway\" aria-label=\"why dont you want to use state manager anyway permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why don’t you want to use state manager anyway?</h2>\n<p>State managers (like <a href=\"https://redux.js.org/\">Redux</a> or <a href=\"https://mobx.js.org/\">MobX</a>) are really great but imho they are just to complex for small apps.</p>\n<h4 id=\"what-is-a-small-app\"><a href=\"#what-is-a-small-app\" aria-label=\"what is a small app permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a “small app”?</h4>\n<p>We can assume it has less than 10 views and you can print whole state definition on one screen. Let me just give you an example of such a state:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// types.ts</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AppState</span> <span class=\"token punctuation\">{</span>\n  settings<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    location<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n      label<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    allowNotifications<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    owner<span class=\"token punctuation\">:</span> <span class=\"token string\">'private'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'business'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'both'</span><span class=\"token punctuation\">;</span>\n    priceFrom<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    priceTo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    sizeFrom<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    sizeTo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    interval<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    seen<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    hashId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    price<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    imgLink<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    isInFavourites<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  favourites<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    seen<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    hashId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    price<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    imgLink<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    isInFavourites<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Disclaimer!\nPlease don’t use this example to create your interface. It’s displaied like that just to show whole state at once. It should be splitted into smaller chunks which could be reused. Refer <code class=\"language-text\">types.ts</code> in sandbox example.</p>\n</blockquote>\n<p>That kind of state could be used in app responsible for filtering and storing sales offers from real estate agencies.</p>\n<h2 id=\"how-to-handle-state-like-that-in-our-app\"><a href=\"#how-to-handle-state-like-that-in-our-app\" aria-label=\"how to handle state like that in our app permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to handle state like that in our app?</h2>\n<p>To do that we have to introduce two types of hooks first:</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\">useContext</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\">useReducer</a></li>\n</ul>\n<p>If you’re not familiar with them I really recommend to stop for a while and check the documentation on the ReactJS website.</p>\n<p><strong>useContext</strong> hook is responsible for creating a <strong>Context</strong> object. Context is designed to share data through the component tree (without props propagation).</p>\n<p><strong>useReducer</strong> hook is like <strong>useState</strong> but it allows you to specify a function that parses incoming data.</p>\n<p>What we’re going to do is to combine those hooks and create sth similar to Redux. By default, <strong>Context</strong> doesn’t provide us with any kind of dispatch method to use. We could go around that problem because it doesn’t restrict the type of values stored within the Context. That’s where <strong>useReducer</strong> comes into play.</p>\n<p>As you know <strong>useReducer</strong> accepts reducer and initial value of state. When it’s called we’re getting state and dispatch function which could be used as an input into Context.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// AppState.tsx</span>\n<span class=\"token keyword\">const</span> AppStateContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createContext<span class=\"token operator\">&lt;</span>AppStateContextType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  defaultAppState<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AppStateProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> defaultAppState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>AppStateContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>AppStateContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>At first, we create a Context that accepts an array with two elements. After that, we have to create our <code class=\"language-text\">AppStateProvider</code> which is a wrapper over <code class=\"language-text\">AppStateContext.Provider</code> and its only purpose is to call <code class=\"language-text\">useReducer(reducer, defaultAppState</code> to get <code class=\"language-text\">state</code> and <code class=\"language-text\">dispatch</code>.</p>\n<blockquote>\n<p>You might ask why <code class=\"language-text\">defaultAppState</code> is set right here? It’s because we have to provide valid argument according to <code class=\"language-text\">AppStateContextType</code>.</p>\n</blockquote>\n<h2 id=\"appstate-in-usage\"><a href=\"#appstate-in-usage\" aria-label=\"appstate in usage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AppState in usage</h2>\n<p>After exporting our state provider and context:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// AppState.tsx</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> AppStateContext<span class=\"token punctuation\">,</span> AppStateProvider <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can go back into our main app and put <code class=\"language-text\">AppStateProvider</code> somewhere in the tree.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// index.tsx</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>AppStateProvider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>AddProperty <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ListComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>AppStateProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>At this moment value of the <code class=\"language-text\">AppStateContext</code> is available to any of the children in the tree (also nested). Let’s jump into <code class=\"language-text\">AddProperty</code> component and see how we could access state information.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// AddProperty.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">,</span> AppStateContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./AppState'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> settings <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>AppStateContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you remember the first element of that array is always a <code class=\"language-text\">state</code> object and the second one is our <code class=\"language-text\">dispatch</code> function. This component has no use for the current state but it requires a method to be able to add new properties into state.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// AddProperty.tsx</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submitProperty</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FormEvent<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ADD_ITEM</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>defaultFormState<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">submitProperty</code> is a <code class=\"language-text\">onSubmit</code> callback for our form. After clicking on the <strong>Submit</strong> button it calls <code class=\"language-text\">dispatch</code> with proper action and that action is handled inside defined reducer.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// AppState.tsx</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ADD_ITEM</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>payload<span class=\"token punctuation\">,</span>\n            seen<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            isInFavourites<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            hashId<span class=\"token punctuation\">:</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>list\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Every time we dispatch this type of action it adds a new item into our <code class=\"language-text\">list</code> and state is updated within <strong>Context</strong>.</p>\n<p>Now we can access that list in another component</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ListComponent.tsx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ListComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>AppStateContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addToFavourites</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>BaseSyntheticEvent<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      target<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        dataset<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> hashid <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ADD_TO_FAVOURITES</span><span class=\"token punctuation\">,</span>\n      payload<span class=\"token punctuation\">:</span> hashid\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>List <span class=\"token keyword\">of</span> properties<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">.</span>hashId<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addToFavourites<span class=\"token punctuation\">}</span> data<span class=\"token operator\">-</span>hashid<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">.</span>hashId<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            Add to Fav\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>Favourites <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This component displays a current list and allows the user to add some of the elements into <strong>favourites</strong>.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>You don’t always have to import external libraries into your project just to manage a simple state. The same effect could be achieved by using builtin methods from React and it doesn’t make it any less readable than Redux (you could even copy reducers from it). It’s up to you to decide if your app could benefit from a more compact approach.</p>\n<p>There is one improvement you could do to make creating reducers easier, but that is a story for another blog post :)</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/09/react-state-management-without-libraries-with-hooks"}}}