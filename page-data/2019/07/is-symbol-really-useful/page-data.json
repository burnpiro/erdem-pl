{"componentChunkName":"component---src-templates-post-template-js","path":"/2019/07/is-symbol-really-useful","result":{"data":{"markdownRemark":{"fields":{"slug":"/2019/07/is-symbol-really-useful","tagSlugs":["/tag/libraries/","/tag/javascript/","/tag/internals/"],"readTime":{"text":"13 min read","minutes":12.65}},"frontmatter":{"description":"Symbols, underestimated feature introduced in ES2015. Does it have any other purpose than interview questions?","tags":["Libraries","Javascript","Internals"],"date":"2019-07-24","title":"Is Symbol really useful?"},"html":"<h3 id=\"quick-recap-what-are-those-symbols-anyway\"><a href=\"#quick-recap-what-are-those-symbols-anyway\" aria-label=\"quick recap what are those symbols anyway permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quick recap, what are those “Symbols” anyway?</h3>\n<blockquote>\n<p>primitive value that represents a unique, non-String Object property key</p>\n</blockquote>\n<p>That’s Symbol definition from current <a href=\"http://www.ecma-international.org/ecma-262/#sec-symbol-value\">spec</a>. But what does it mean? You probably know other primitive types in JS (<code>Undefined</code>, <code>Null</code>, <code>Boolean</code>, <code>Number</code>, <code>BigInt</code> or <code>String</code>). Symbol is another one. I know that is not much and is sounds like defining recursion:</p>\n<blockquote>\n<p>To understand recursion, you must first understand recursion</p>\n</blockquote>\n<p>In programming languages all primitive types are just a bunch of bytes stored in memory. It doesn’t matter if it’s a string or number, from a data perspective it’s still just bytes. In case of symbols they are <code>tokens</code> that serves as unique IDs.</p>\n<h4 id=\"how-to-use-symbol\"><a href=\"#how-to-use-symbol\" aria-label=\"how to use symbol permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use Symbol</h4>\n<pre class=\"grvsc-container quiet-light\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\">// string &quot;id&quot; is a Symbol&#39;s description</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">const</span><span class=\"mtk1\"> </span><span class=\"mtk7\">id</span><span class=\"mtk1\"> </span><span class=\"mtk6\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">id</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">)</span><span class=\"mtk6\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\">// you can also create Symbol without description</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">const</span><span class=\"mtk1\"> </span><span class=\"mtk7\">noDescriptionId</span><span class=\"mtk1\"> </span><span class=\"mtk6\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk1\">()</span><span class=\"mtk6\">;</span></span></span></code></pre>\n<p>We’ve just created <code>id</code> which is a Symbol. But important thing is that <code>id !== Symbol('id')</code>. Like I’ve said earlier Symbols are unique.</p>\n<h4 id=\"unless-they-arent\"><a href=\"#unless-they-arent\" aria-label=\"unless they arent permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unless they aren’t…</h4>\n<p>There is another way to create Symbol, and it’s called</p>\n<pre class=\"grvsc-container quiet-light\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">for</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">id</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">)</span><span class=\"mtk6\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtkb\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">for</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">id</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">) </span><span class=\"mtk6\">===</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">for</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">id</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">))</span><span class=\"mtk6\">;</span><span class=\"mtk1\"> </span><span class=\"mtk3 mtki\">// true</span></span></span></code></pre>\n<p>OK, what happened here? We’ve just used <code>global Symbol registry</code> to store our Symbol. As the name says it’s a <code>global</code> registry and global in this case is also cross-realm (in JS that mean Symbol created inside iframe and is the same as in your current execution context).</p>\n<p>Aside note: You can check if Symbol is unique or not. For that you can use <code>Symbol.keyFor(yourSymbol)</code>. If <code>yourSymbol</code> is global, then it returns Symbol’s description (<code>id</code>) as a string, else it returns <code>undefined</code>.</p>\n<pre class=\"grvsc-container quiet-light\" data-language=\"javascript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtkb\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">keyFor</span><span class=\"mtk1\">(</span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">for</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">id</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">)) </span><span class=\"mtk6\">===</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">id</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">)</span><span class=\"mtk6\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtkb\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">keyFor</span><span class=\"mtk1\">(</span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">id</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">)) </span><span class=\"mtk6\">===</span><span class=\"mtk1\"> </span><span class=\"mtk5\">undefined</span><span class=\"mtk1\">)</span><span class=\"mtk6\">;</span></span></span></code></pre>\n<h4 id=\"properties-you-need-to-know\"><a href=\"#properties-you-need-to-know\" aria-label=\"properties you need to know permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Properties you need to know</h4>\n<ul>\n<li>Symbol will never conflict with Object key. You can use Symbol as object key <code>store[Symbol.for('id')] = 42</code>.</li>\n<li>Keys created using Symbol is not iterable. So when you call <code>Object.values(store)</code> you won’t get <code>42</code> unless there is another key (not Symbol key) with that value. That’s really useful property because it won’t change library behaviour when you add another property.</li>\n<li>To extract Symbols from object, you can use <code>Object.getOwnPropertySymbols()</code>.</li>\n<li>Symbols are copied to other objects. Every enumerable Symbol is copied from obj <code>a</code> into obj <code>b</code> when <code>Object.assign(a, b)</code> is called.</li>\n</ul>\n<h2 id=\"symbols-usefulness\"><a href=\"#symbols-usefulness\" aria-label=\"symbols usefulness permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol’s usefulness</h2>\n<p>Now when you know what a Symbol is, we can discuss why should you consider Symbols useful? Let’s suppose you’re creating library and want to give your user possibility to extend your library.</p>\n<p>Your library is called <code>stateOfTheArtValidation</code> (<code>stav</code> to make it short). And it exports list of available extensions you can assign to your object.</p>\n<pre class=\"grvsc-container quiet-light\" data-language=\"javascript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">export</span><span class=\"mtk1\"> </span><span class=\"mtk7\">const</span><span class=\"mtk1\"> </span><span class=\"mtk7\">extensibleSymbols</span><span class=\"mtk1\"> </span><span class=\"mtk6\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  VALIDATION</span><span class=\"mtk6\">:</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">validationFun</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">)</span><span class=\"mtk6\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  REQUIRED</span><span class=\"mtk6\">:</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">required</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">)</span><span class=\"mtk6\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">};</span></span></span></code></pre>\n<p>Now we can use any of those Symbols in our objects.</p>\n<pre class=\"grvsc-container quiet-light\" data-language=\"javascript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">const</span><span class=\"mtk1\"> </span><span class=\"mtk7\">myObj</span><span class=\"mtk1\"> </span><span class=\"mtk6\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  someProp</span><span class=\"mtk6\">:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">anyValue</span><span class=\"mtk6\">&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  [</span><span class=\"mtk7\">stav</span><span class=\"mtk6\">.</span><span class=\"mtk7\">Symbols</span><span class=\"mtk6\">.</span><span class=\"mtk7\">VALIDATION</span><span class=\"mtk1\">]</span><span class=\"mtk6\">:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">element</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">element</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">hasOwnProperty</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">someProp</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">)</span><span class=\"mtk6\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">};</span></span></span></code></pre>\n<p>Let me first show you what your library does with that, before we discuss it.</p>\n<pre class=\"grvsc-container quiet-light\" data-language=\"javascript\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\">// somewhere in our library</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">validate</span><span class=\"mtk6\">:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">(...</span><span class=\"mtk7\">objectsToValidate</span><span class=\"mtk6\">)</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">const</span><span class=\"mtk1\"> </span><span class=\"mtk7\">validations</span><span class=\"mtk1\"> </span><span class=\"mtk6\">=</span><span class=\"mtk1\"> []</span><span class=\"mtk6\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk7\">const</span><span class=\"mtk1\"> </span><span class=\"mtk7\">objToValidate</span><span class=\"mtk1\"> </span><span class=\"mtk6\">of</span><span class=\"mtk1\"> </span><span class=\"mtk7\">objectsToValidate</span><span class=\"mtk1\">) </span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk6\">typeof</span><span class=\"mtk1\"> </span><span class=\"mtk7\">objToValidate</span><span class=\"mtk1\">[</span><span class=\"mtk5\">this</span><span class=\"mtk6\">.</span><span class=\"mtk7\">Symbols</span><span class=\"mtk6\">.</span><span class=\"mtk7\">VALIDATION</span><span class=\"mtk1\">] </span><span class=\"mtk6\">===</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">function</span><span class=\"mtk6\">&#39;</span><span class=\"mtk1\">) </span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">validations</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">push</span><span class=\"mtk1\">(</span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        result</span><span class=\"mtk6\">:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">objToValidate</span><span class=\"mtk1\">[</span><span class=\"mtk5\">this</span><span class=\"mtk6\">.</span><span class=\"mtk7\">Symbols</span><span class=\"mtk6\">.</span><span class=\"mtk7\">VALIDATION</span><span class=\"mtk1\">](</span><span class=\"mtk7\">objToValidate</span><span class=\"mtk1\">)</span><span class=\"mtk6\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk6\">}</span><span class=\"mtk1\">)</span><span class=\"mtk6\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk6\">}</span><span class=\"mtk1\"> </span><span class=\"mtk10\">else</span><span class=\"mtk1\"> </span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">validations</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">push</span><span class=\"mtk1\">(</span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        result</span><span class=\"mtk6\">:</span><span class=\"mtk1\"> </span><span class=\"mtk5\">this</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">standardValidation</span><span class=\"mtk1\">(</span><span class=\"mtk7\">objToValidate</span><span class=\"mtk1\">)</span><span class=\"mtk6\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk6\">}</span><span class=\"mtk1\">)</span><span class=\"mtk6\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk6\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk6\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">validations</span><span class=\"mtk6\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">};</span></span></span></code></pre>\n<p><code>validate</code> is a method from your library. But there are some cases when you want to give user option to apply their validation instead of your <code>standardValidation</code> method. Instead of defining a list of string properties which user can use to attach their validation method, you’ve defined Symbol for it. That way there is 0% chance to have a conflict with any of existing keys on that object, so a user cannot accidentally overwrite property you want to use.</p>\n<p>Ofc that example is not really useful IRL but you get an idea.</p>\n<h3 id=\"well-known-symbols\"><a href=\"#well-known-symbols\" aria-label=\"well known symbols permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://tc39.es/ecma262/#sec-well-known-symbols\">Well-Known Symbols</a></h3>\n<blockquote>\n<p>Well-known symbols are built-in Symbol values that are explicitly referenced by algorithms of this specification.</p>\n</blockquote>\n<p>Someone already thought about that by creating built-in Symbols in JS. Those Symbols are useful to overwrite/add functionalities of/to objects. For instance, you can use <code>Symbol.iterator</code> to define iterator and enable your object to be iterable in the way you want.</p>\n<pre class=\"grvsc-container quiet-light\" data-language=\"javascript\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">const</span><span class=\"mtk1\"> </span><span class=\"mtk7\">myObj</span><span class=\"mtk1\"> </span><span class=\"mtk6\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  test</span><span class=\"mtk6\">:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">test</span><span class=\"mtk6\">&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">myObj</span><span class=\"mtk1\">[</span><span class=\"mtk7 mtkb\">Symbol</span><span class=\"mtk6\">.</span><span class=\"mtk7\">iterator</span><span class=\"mtk1\">] </span><span class=\"mtk6\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">function</span><span class=\"mtk10\">*</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtkb\">myGenerator</span><span class=\"mtk6\">()</span><span class=\"mtk1\"> </span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10\">yield</span><span class=\"mtk1\"> </span><span class=\"mtk5\">this</span><span class=\"mtk6\">.</span><span class=\"mtk7\">test</span><span class=\"mtk6\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10\">yield</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;</span><span class=\"mtk4\">See ya!</span><span class=\"mtk6\">&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk7\">const</span><span class=\"mtk1\"> </span><span class=\"mtk7\">val</span><span class=\"mtk1\"> </span><span class=\"mtk6\">of</span><span class=\"mtk1\"> </span><span class=\"mtk7\">myObj</span><span class=\"mtk1\">) </span><span class=\"mtk6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7 mtkb\">console</span><span class=\"mtk6\">.</span><span class=\"mtk9 mtkb\">log</span><span class=\"mtk1\">(</span><span class=\"mtk7\">val</span><span class=\"mtk1\">)</span><span class=\"mtk6\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">}</span></span></span></code></pre>\n<p>Prints:</p>\n<pre class=\"grvsc-container quiet-light\" data-language=\"javascript\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">test</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">See</span><span class=\"mtk1\"> </span><span class=\"mtk7\">ya</span><span class=\"mtk6\">!</span></span></span></code></pre>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>Now you understand how powerful and useful Symbols might be. Probably you’re going to use built-in Symbols more often than defining your own. But library creators (like you :P ) have another way for users to extend library functionality.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .quiet-light { background-color: #F5F5F5; }\n  .quiet-light .mtkb { font-weight: bold; }\n  .quiet-light .mtki { font-style: italic; }\n  .quiet-light .mtk3 { color: #AAAAAA; }\n  .quiet-light .mtk7 { color: #7A3E9D; }\n  .quiet-light .mtk1 { color: #333333; }\n  .quiet-light .mtk6 { color: #777777; }\n  .quiet-light .mtk4 { color: #448C27; }\n  .quiet-light .mtk9 { color: #AA3731; }\n  .quiet-light .mtk5 { color: #9C5D27; }\n  .quiet-light .mtk10 { color: #4B69C6; }\n  .quiet-light .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n</style>"}},"pageContext":{"slug":"/2019/07/is-symbol-really-useful"}}}