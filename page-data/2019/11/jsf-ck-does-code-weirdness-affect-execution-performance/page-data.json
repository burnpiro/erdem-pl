{"componentChunkName":"component---src-templates-post-template-js","path":"/2019/11/jsf-ck-does-code-weirdness-affect-execution-performance","webpackCompilationHash":"f5284c019f7235a3e544","result":{"data":{"markdownRemark":{"fields":{"slug":"/2019/11/jsf-ck-does-code-weirdness-affect-execution-performance","tagSlugs":["/tag/javascript/","/tag/performance/","/tag/internals/"],"readTime":{"text":"16 min read","minutes":15.05}},"frontmatter":{"description":"Checking if how we write JS can change the performance of its execution even if it is the same code?","tags":["Javascript","Performance","Internals"],"date":"2019-11-07","title":"JSF*ck - Does code weirdness affect execution performance?"},"html":"<blockquote>\n<p>This post is created base on Martin Kleppe’s (<a href=\"https://twitter.com/aemkei\">@aemkei</a>) work about converting JS to only six basic characters and still keeping it executable. It is a response to comment from <a href=\"https://www.youtube.com/watch?v=sRWE5tnaxlI&#x26;lc=Ugw8lYvWtPQReYaahmZ4AaABAg\">Jonathan Means</a>.</p>\n</blockquote>\n<p>For those who are reading this out of the context, I’m going to spend a while explaining the problem before jumping to tests.</p>\n<h3 id=\"what-is-jsfck\"><a href=\"#what-is-jsfck\" aria-label=\"what is jsfck permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is JSF*ck?</h3>\n<p>Except for being NSFW, it’s a programming style that only using six characters to write and execute code in JS. We can do that because of sth called <strong>Type Coercion</strong>. JS coercion comes up once in a while on JS conferences (and mostly to make some funny video out of it), it’s purpose is to allow users to operate on a different type of types without explicitly casting them into one.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token comment\">// \"15\"</span></code></pre></div>\n<p>The idea is great but sometimes (or more likely quite often) people don’t understand how it actually works under the hood. For those who are interested in the idea here is a link to the specification <a href=\"http://www.ecma-international.org/ecma-262/#sec-type-conversion\">http://www.ecma-international.org/ecma-262/#sec-type-conversion</a>.</p>\n<p>Most of those talks are picking some of the non-intuitive examples like</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"\"</span></code></pre></div>\n<p>or one of the most famous one (<code class=\"language-text\">+ +&quot;a&quot;</code> returns <strong>“NaN”</strong>)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> yellowFruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"banana\"</span></code></pre></div>\n<h3 id=\"what-can-we-do-with-that\"><a href=\"#what-can-we-do-with-that\" aria-label=\"what can we do with that permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What can we do with that?</h3>\n<p>Because of coercion we should be able to create any valid sentence in JavaScript (including evaluation). If we could do that, then we should be able to convert our code into sth like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 5+4</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Achieving this is not that straightforward as you might think.</p>\n<p>To get a number as a string you could use</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"0\"</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"1\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"10</span></code></pre></div>\n<p>Getting strings is even more difficult</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"d\" or \"undefined\"[2]</span></code></pre></div>\n<p>It is using the fact that strings could be accessed as an array of chars and you can generate <strong>“undefined”</strong> string quite easily by calling <code class=\"language-text\">[][[]]</code>.</p>\n<p>I’m not going to explain every single one of them in detail. There is a great video released by LowLevelJS <a href=\"https://www.youtube.com/watch?v=sRWE5tnaxlI\">https://www.youtube.com/watch?v=sRWE5tnaxlI</a> that covers the topic. If you want to play with it please go to <a href=\"http://www.jsfuck.com/\">http://www.jsfuck.com/</a> and try your code in there.</p>\n<h3 id=\"implications-on-performance\"><a href=\"#implications-on-performance\" aria-label=\"implications on performance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implications on performance</h3>\n<p>As you might notice writing down the whole bunch of code this way is quite space expensive. I’ve managed to parse some of the test code into JSF convention and code which looks like</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> startT1 <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> tmp<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp2<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp3<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp4<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp5<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'Gandalf'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'The Grey'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> f2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> tmp<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp2<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp3<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp4<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp5<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'Sparrow'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> f3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> tmp<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp2<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp3<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp4<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp5<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'Charles'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'Xavier'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> f4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> tmp<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp2<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp3<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp4<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp5<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'Frodo'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'Baggins'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> f5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> tmp<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp2<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp3<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp4<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp5<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'Legolas'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'Thranduilion'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> f6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> tmp<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp2<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp3<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp4<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> tmp5<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'Indiana'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jones'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> obj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>f3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>f4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>f5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>f6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test with one shape:\"</span><span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startT1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ms.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Parses into 847192 lines long string. So instead of having >1KB file, we have 828KB now. You can get that code <a href=\"https://gist.github.com/burnpiro/5a177d8bb307005c4d8f5672fe9ff0a3\">Here</a> and execute it just by calling <code class=\"language-text\">node index.js</code>.</p>\n<h4 id=\"its-time-to-start-testing-our-code\"><a href=\"#its-time-to-start-testing-our-code\" aria-label=\"its time to start testing our code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>It’s time to start testing our code!!!</h4>\n<p>Test Env:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Ubuntu 18.04\nNode 12.13.0\nIntel i7-7820X</code></pre></div>\n<p>Test examples:</p>\n<ul>\n<li>standard call - <a href=\"https://gist.github.com/burnpiro/56be270ac032924faf48824e08995687\">https://gist.github.com/burnpiro/56be270ac032924faf48824e08995687</a></li>\n<li>string eval - <a href=\"https://gist.github.com/burnpiro/ffaa8edac33370e1aa5126c83fb728bb\">https://gist.github.com/burnpiro/ffaa8edac33370e1aa5126c83fb728bb</a></li>\n<li>JSF eval - <a href=\"https://gist.github.com/burnpiro/5a177d8bb307005c4d8f5672fe9ff0a3\">https://gist.github.com/burnpiro/5a177d8bb307005c4d8f5672fe9ff0a3</a></li>\n</ul>\n<p>I’m testing standard function twice be able to spot the difference in <code class=\"language-text\">eval</code> execution.</p>\n<h5 id=\"test-results\"><a href=\"#test-results\" aria-label=\"test results permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Results:</h5>\n<p>standard call (50 samples)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">AVG: 3274ms\nStd. Dev: 7ms\nHeap: 8.06MB</code></pre></div>\n<p>string eval (50 samples)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">AVG: 3272ms\nStd. Dev: 6ms\nHeap: 8.08MB</code></pre></div>\n<p>JSF eval (50 samples):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">AVG: 3241ms\nStd. Dev: 8ms\nHeap: 18.88MB</code></pre></div>\n<blockquote>\n<p>NOTE! Values on your machine might be different because you’re using different version of nodeJS or different processor. </p>\n</blockquote>\n<h3 id=\"conclusions\"><a href=\"#conclusions\" aria-label=\"conclusions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h3>\n<p>There is no difference in execution performance between different versions of the same code in V8 (node). It was an expected but important thing to see here is the amount of memory used by V8. There is almost no difference between evaluation and standard function call, but parsing your code to JSF takes a lot more memory than the original one.</p>\n<p>It’s not that surprising if you look at it. Storing and parsing almost 1MB file in JS Engine should take a lot more memory than a 1KB file.</p>\n<p>Even if JSF code is not practical people might get a better understanding of how JS works just by reading some of it. Type coercion is not some magic as many people on twitter things. I know that <strong><em>“Any sufficiently advanced technology is indistinguishable from magic”</em></strong> (Clarke’s First Law) but I like to rephrase that: <strong><em>“Any incomprehensible technology is indistinguishable from magic”</em></strong>. If you can understand it, it’s not magic any more :)</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/11/jsf-ck-does-code-weirdness-affect-execution-performance"}}}