(this.webpackJsonp=this.webpackJsonp||[]).push([[8],{"L/of":function(t,o,e){t.exports={"attention-continaer":"AttentionLayer-module--attention-continaer--3KtzD"}},icEe:function(t,o,e){"use strict";var i=e("q1tI"),n=e.n(i),s=e("dec9"),r=e("OMM4"),a=e("KQm4"),l=e("Oy/b"),p='\n<span>\nE<sub>i,j</sub> = <strong style="color: mediumpurple;">Q<sub>i</sub></strong><strong style="color: limegreen">X<sub>j</sub></strong> / sqrt(D<sub>Q</sub>)\n</span>\n',b='\n<span>\n<strong style="color: hotpink">Y<sub>i</sub></strong> = âˆ‘<sub>j</sub>(<span style="">A<sub>i,j</sub></span><strong style="color: limegreen">X<sub>j</sub></strong>)\n</span>\n',u="\n  <span>\n  A = softmax(E, dim=1)\n  </span>\n",m='<div style="text-align: left; margin: 10px 0; width: 95%; height: 95%">\n<div style="text-align: center; font-weight: bold;">Attention Layer</div>\n<b>Input vectors</b>: <strong style="color: limegreen;">X</strong> (shape '+l.renderToString("N_X \\times D_X")+')<br/>\n<b>Query vectors</b>: <strong style="color: mediumpurple;">Q</strong> (Shape '+l.renderToString("N_Q \\times D_Q")+")<br/><br/>\n<b>Similarity function</b>: <i>scaled dot product</i><br/>\n<b>Similarities</b>: "+l.renderToString("E = \\textcolor{mediumpurple}{Q}\\textcolor{limegreen}{X^T}")+" (shape "+l.renderToString("N_Q \\times N_X")+"), "+l.renderToString("E_{i,j} = \\textcolor{mediumpurple}{Q_i} \\cdot \\textcolor{limegreen}{X_j} / \\sqrt{D_Q}")+"<br/>\n<b>Attention weights</b>: "+l.renderToString("A = \\text{softmax}(E, dim=1)")+" (shape "+l.renderToString("N_Q \\times N_X")+")<br/>\n<b>Output</b>: "+l.renderToString("\\textcolor{hotpink}{Y} = A\\textcolor{limegreen}{X}")+" (shape "+l.renderToString("N_Q \\times D_X")+") where "+l.renderToString("\\textcolor{hotpink}{Y_i} = \\sum_j(A_{i,j},\\textcolor{limegreen}{X_j})")+"<br/>\n</div>",c='<div style="text-align: left; margin: 10px 0; width: 95%; height: 95%">\n<div style="text-align: center; font-weight: bold;">Attention Layer</div>\n<b>Input vectors</b>: <strong style="color: limegreen;">X</strong> (shape '+l.renderToString("N_X \\times D_X")+')<br/>\n<b>Query vectors</b>: <strong style="color: mediumpurple;">Q</strong> (Shape '+l.renderToString("N_Q \\times D_Q")+')<br/>\n<b>Key matrix</b>: <strong style="color: darkorange;">W<sub>K</sub></strong> (Shape '+l.renderToString("D_X \\times D_Q")+')<br/>\n<b>Value matrix</b>: <strong style="color: royalblue;">W<sub>V</sub></strong> (Shape '+l.renderToString("D_X \\times D_V")+")<br/><br/>\n<b>Key vectors</b>: "+l.renderToString("\\textcolor{darkorange}{K} = \\textcolor{limegreen}{X}\\textcolor{darkorange}{W_K}")+" (Shape "+l.renderToString("N_X \\times D_Q")+")<br/>\n<b>Value vectors</b>: "+l.renderToString("\\textcolor{royalblue}{V} = \\textcolor{limegreen}{X}\\textcolor{royalblue}{W_V}")+" (Shape "+l.renderToString("N_X \\times D_V")+")<br/>\n<b>Similarity function</b>: <i>scaled dot product</i><br/>\n<b>Similarities</b>: "+l.renderToString("E = \\textcolor{mediumpurple}{Q}\\textcolor{darkorange}{K^T}")+" (shape "+l.renderToString("N_Q \\times N_X")+"), "+l.renderToString("E_{i,j} = \\textcolor{mediumpurple}{Q_i} \\cdot \\textcolor{darkorange}{K_j} / \\sqrt{D_Q}")+"<br/>\n<b>Attention weights</b>: "+l.renderToString("A = \\text{softmax}(E, dim=1)")+" (shape "+l.renderToString("N_Q \\times N_X")+")<br/>\n<b>Output</b>: "+l.renderToString("\\textcolor{hotpink}{Y} = A\\textcolor{royalblue}{V}")+" (shape "+l.renderToString("N_Q \\times D_V")+") where "+l.renderToString("\\textcolor{hotpink}{Y_i} = \\sum_j(A_{i,j},\\textcolor{royalblue}{V_j})")+"<br/>\n</div>",d='<div style="text-align: left; margin: 10px 0; width: 95%; height: 95%">\n<div style="text-align: center; font-weight: bold;">Self-Attention Layer</div>\n<b>Input vectors</b>: <strong style="color: limegreen;">X</strong> (shape '+l.renderToString("N_X \\times D_X")+')<br/>\n<b>Key matrix</b>: <strong style="color: darkorange;">W<sub>K</sub></strong> (Shape '+l.renderToString("D_X \\times D_Q")+')<br/>\n<b>Value matrix</b>: <strong style="color: royalblue;">W<sub>V</sub></strong> (Shape '+l.renderToString("D_X \\times D_V")+')<br/>\n<b>Query matrix</b>: <strong style="color: mediumpurple;">W<sub>Q</sub></strong> (Shape '+l.renderToString("D_X \\times D_Q")+")<br/><br/>\n<b>Query vectors</b>: "+l.renderToString("\\textcolor{mediumpurple}{Q} = \\textcolor{limegreen}{X}\\textcolor{mediumpurple}{W_Q}")+" (Shape "+l.renderToString("N_X \\times D_Q")+")<br/>\n<b>Key vectors</b>: "+l.renderToString("\\textcolor{darkorange}{K} = \\textcolor{limegreen}{X}\\textcolor{darkorange}{W_K}")+" (Shape "+l.renderToString("N_X \\times D_Q")+")<br/>\n<b>Value vectors</b>: "+l.renderToString("\\textcolor{royalblue}{V} = \\textcolor{limegreen}{X}\\textcolor{royalblue}{W_V}")+" (Shape "+l.renderToString("N_X \\times D_V")+")<br/>\n<b>Similarity function</b>: <i>scaled dot product</i><br/>\n<b>Similarities</b>: "+l.renderToString("E = \\textcolor{mediumpurple}{Q}\\textcolor{darkorange}{K^T}")+" (shape "+l.renderToString("N_X \\times N_X")+"), "+l.renderToString("E_{i,j} = \\textcolor{mediumpurple}{Q_i} \\cdot \\textcolor{darkorange}{K_j} / \\sqrt{D_Q}")+"<br/>\n<b>Attention weights</b>: "+l.renderToString("A = \\text{softmax}(E, dim=1)")+" (shape "+l.renderToString("N_X \\times N_X")+")<br/>\n<b>Output</b>: "+l.renderToString("\\textcolor{hotpink}{Y} = A\\textcolor{royalblue}{V}")+" (shape "+l.renderToString("N_X \\times D_V")+") where "+l.renderToString("\\textcolor{hotpink}{Y_i} = \\sum_j(A_{i,j},\\textcolor{royalblue}{V_j})")+"<br/>\n</div>",g={attention:{color:"#E2CFC4",borderColor:"#523828",size:"50px",blockName:"attention",blockType:"rect",items:[{id:"e11",val:"<span>\n          E<sub>1,1</sub>\n        </span>",tooltipValue:p,position:[288,350]},{id:"e12",val:"<span>\n          E<sub>2,1</sub>\n        </span>",tooltipValue:p,position:[338,350]},{id:"e13",val:"<span>\n          E<sub>3,1</sub>\n        </span>",tooltipValue:p,position:[388,350]},{id:"e21",val:"<span>\n          E<sub>1,2</sub>\n        </span>",tooltipValue:p,position:[288,400]},{id:"e22",val:"<span>\n          E<sub>2,2</sub>\n        </span>",tooltipValue:p,position:[338,400]},{id:"e23",val:"<span>\n          E<sub>3,2</sub>\n        </span>",tooltipValue:p,position:[388,400]},{id:"e31",val:"<span>\n          E<sub>1,3</sub>\n        </span>",tooltipValue:p,position:[288,450]},{id:"e32",val:"<span>\n          E<sub>2,3</sub>\n        </span>",tooltipValue:p,position:[338,450]},{id:"e33",val:"<span>\n          E<sub>3,3</sub>\n        </span>",tooltipValue:p,position:[388,450]},{id:"a11",val:"<span>\n          A<sub>1,1</sub>\n        </span>",tooltipValue:u,position:[288,125]},{id:"a12",val:"<span>\n          A<sub>2,1</sub>\n        </span>",tooltipValue:u,position:[338,125]},{id:"a13",val:"<span>\n          A<sub>3,1</sub>\n        </span>",tooltipValue:u,position:[388,125]},{id:"a21",val:"<span>\n          A<sub>1,2</sub>\n        </span>",tooltipValue:u,position:[288,175]},{id:"a22",val:"<span>\n          A<sub>2,2</sub>\n        </span>",tooltipValue:u,position:[338,175]},{id:"a23",val:"<span>\n          A<sub>3,2</sub>\n        </span>",tooltipValue:u,position:[388,175]},{id:"a31",val:"<span>\n          A<sub>1,3</sub>\n        </span>",tooltipValue:u,position:[288,225]},{id:"a32",val:"<span>\n          A<sub>2,3</sub>\n        </span>",tooltipValue:u,position:[338,225]},{id:"a33",val:"<span>\n          A<sub>3,3</sub>\n        </span>",tooltipValue:u,position:[388,225]}]},inputs:{color:"#CAFFBF",borderColor:"#147A00",size:"50px",blockName:"inputs",blockType:"rect",items:[{id:"X1",val:"<span>\n          X<sub>1</sub>\n        </span>",position:[192,350],lines:[{from:[242,375],to:[288,375],orientation:"horizontal"},{from:[192,375],points:[[167,375],[167,150]],to:[288,150],orientation:"multi-squared"}]},{id:"X2",val:"<span>\n          X<sub>2</sub>\n        </span>",position:[192,400],lines:[{from:[242,425],to:[288,425],orientation:"horizontal"},{from:[192,425],points:[[142,425],[142,200]],to:[288,200],orientation:"multi-squared"}]},{id:"X3",val:"<span>\n          X<sub>3</sub>\n        </span>",position:[192,450],lines:[{from:[242,475],to:[288,475],orientation:"horizontal"},{from:[192,475],points:[[117,475],[117,250]],to:[288,250],orientation:"multi-squared"}]}]},query:{color:"#DCD6FF",borderColor:"#6347FF",size:"50px",blockName:"query",blockType:"rect",items:[{id:"Q1",val:"<span>\n          Q<sub>1</sub>\n        </span>",position:[288,520],lines:[{from:[313,520],to:[313,500],orientation:"vertical"}]},{id:"Q2",val:"<span>\n          Q<sub>2</sub>\n        </span>",position:[338,520],lines:[{from:[363,520],to:[363,500],orientation:"vertical"}]},{id:"Q3",val:"<span>\n          Q<sub>3</sub>\n        </span>",position:[388,520],lines:[{from:[413,520],to:[413,500],orientation:"vertical"}]}]},queryWeights:{color:"#EEEBFF",borderColor:"#A899FF",size:"50px",blockName:"query-weights",blockType:"rect",items:[]},queVal:{color:"#DCD6FF",borderColor:"#6347FF",blockName:"que-vectors",size:"25px",blockType:"rect",items:[]},values:{color:"#9BF6FF",borderColor:"#00838F",size:"50px",blockName:"values",blockType:"rect",items:[]},valuesWeights:{color:"#C2FAFF",borderColor:"#5CF1FF",size:"50px",blockName:"values-weights",blockType:"rect",items:[]},ilVal:{color:"#9BF6FF",borderColor:"#00838F",blockName:"val-vectors",size:"25px",blockType:"rect",items:[]},keys:{color:"#FFD199",borderColor:"#A35A00",size:"50px",blockName:"keys",blockType:"rect",items:[]},keysWeights:{color:"#FFEDD6",borderColor:"#FFAF47",size:"50px",blockName:"keys-weights",blockType:"rect",items:[]},keyVal:{color:"#FFD199",borderColor:"#A35A00",blockName:"key-vectors",size:"25px",blockType:"rect",items:[]},zVal:{color:"#FFEBFF",borderColor:"#FF47FF",blockName:"z-vectors",size:"25px",blockType:"rect",items:[]},output:{color:"#FFEBFF",borderColor:"#FF47FF",size:"50px",blockName:"output",blockType:"rect",items:[{id:"Y1",val:"<span>\n          Y<sub>1</sub>\n        </span>",tooltipValue:b,position:[288,50],lines:[{from:[313,125],to:[313,100],orientation:"vertical"}]},{id:"Y2",val:"<span>\n          Y<sub>2</sub>\n        </span>",tooltipValue:b,position:[338,50],lines:[{from:[363,125],to:[363,100],orientation:"vertical"}]},{id:"Y3",val:"<span>\n          Y<sub>3</sub>\n        </span>",tooltipValue:b,position:[388,50],lines:[{from:[413,125],to:[413,100],orientation:"vertical"}]}]},text:{color:"#CAFFBF",borderColor:"#333",sizeX:"300px",sizeY:"50px",blockName:"text",blockType:"text",items:[{id:"initial-state",val:m,sizeX:"650px",sizeY:"250px",position:[480,7]}]},softmax:{color:"#CAFFBF",borderColor:"#333",sizeX:150,sizeY:"25px",blockName:"softmax",blockType:"text",items:[{id:"softmax-layer",val:"<span>\n          softmax\n        </span>",position:[288,300],lines:[{from:[363,350],to:[363,325],orientation:"vertical"},{from:[363,300],to:[363,275],orientation:"vertical"}]}]},operations:{color:"#E2E2DF",borderColor:"#40403A",size:"16px",blockName:"operations",blockType:"circle",items:[]}},x=Object.assign({},g,{text:Object.assign({},g.text,{items:g.text.items.map((function(t){return Object.assign({},t,{sizeY:"380px",val:c})}))}),attention:Object.assign({},g.attention,{items:g.attention.items.map((function(t){return Object.assign({},t,{tooltipValue:null!=t.id.match(/e/gi)?'\n<span>\nE<sub>i,j</sub> = <strong style="color: mediumpurple;">Q<sub>i</sub></strong><strong style="color: darkorange">K<sub>j</sub></strong> / sqrt(D<sub>Q</sub>)\n</span>\n':t.tooltipValue})}))}),inputs:Object.assign({},g.inputs,{items:g.inputs.items.map((function(t,o){return Object.assign({},t,{position:[t.position[0]-175,t.position[1]],lines:[{from:[t.position[0]-125,t.position[1]+25],points:[[t.position[0]-125+10*(o+1)+5,t.position[1]+25],[t.position[0]-125+10*(o+1)+5,g.attention.items[9].position[1]+50*o+25]],to:[t.position[0]-75,g.attention.items[9].position[1]+50*o+25],color:g.valuesWeights.borderColor,orientation:"multi-squared"},{from:[t.position[0]-125,t.position[1]+25],to:[t.position[0]-75,t.position[1]+25]}]})}))}),keys:Object.assign({},g.keys,{items:Object(a.a)(g.inputs.items.map((function(t,o){return Object.assign({},t,{id:"K"+(o+1),val:"<span>\n            K<sub>"+(o+1)+"</sub>\n          </span>",tooltipValue:'\n<span>\n<strong style="color: darkorange">K<sub>i</sub></strong> = <strong style="color: limegreen;">X<sub>i</sub></strong><strong style="color: darkorange">W<sub>Ki</sub></strong>\n</span>\n',lines:[t.lines[0]]})})))}),keysWeights:Object.assign({},g.keysWeights,{items:Object(a.a)(g.inputs.items.map((function(t,o){return Object.assign({},t,{id:"Wk"+(o+1),val:"<span>\n            W<sub>K"+(o+1)+"</sub>\n          </span>",position:[t.position[0]-75,t.position[1]],lines:[{from:[t.lines[0].from[0]-75,t.lines[0].from[1]],to:[t.lines[0].to[0]-100,t.lines[0].from[1]],orientation:"horizontal"}]})})))}),values:Object.assign({},g.values,{items:g.inputs.items.map((function(t,o){return Object.assign({},t,{id:"V"+(o+1),val:"<span>\n          V<sub>"+(o+1)+"</sub>\n        </span>",tooltipValue:'\n<span>\n<strong style="color: royalblue">V<sub>i</sub></strong> = <strong style="color: limegreen;">X<sub>i</sub></strong><strong style="color: royalblue">W<sub>Vi</sub></strong>\n</span>\n',position:[t.position[0],g.attention.items[9].position[1]+50*o],lines:[{from:[t.lines[0].from[0],g.attention.items[9].position[1]+50*o+25],to:[t.lines[0].to[0],g.attention.items[9].position[1]+50*o+25],orientation:"horizontal"}]})}))}),valuesWeights:Object.assign({},g.valuesWeights,{items:g.inputs.items.map((function(t,o){return Object.assign({},t,{id:"Wv"+(o+1),val:"<span>\n          W<sub>V"+(o+1)+"</sub>\n        </span>",position:[t.position[0]-75,g.attention.items[9].position[1]+50*o],lines:[{from:[t.lines[0].from[0]-75,g.attention.items[9].position[1]+50*o+25],to:[t.lines[0].to[0]-100,g.attention.items[9].position[1]+50*o+25],orientation:"horizontal"}]})}))}),outputs:Object.assign({},g.output,{items:g.output.items.map((function(t){return Object.assign({},t,{tooltipValue:'\n<span>\n<strong style="color: hotpink">Y<sub>i</sub></strong> = âˆ‘<sub>j</sub>(<span style="">A<sub>i,j</sub></span><strong style="color: royalblue">V<sub>j</sub></strong>)\n</span>\n'})}))})}),y=Object.assign({},x,{text:Object.assign({},x.text,{items:x.text.items.map((function(t){return Object.assign({},t,{sizeY:"430px",val:d})}))}),query:Object.assign({},x.query,{items:x.query.items.map((function(t){return Object.assign({},t,{tooltipValue:'\n<span>\n<strong style="color: mediumpurple">Q<sub>i</sub></strong> = <strong style="color: limegreen;">X<sub>i</sub></strong><strong style="color: mediumpurple">W<sub>Qi</sub></strong>\n</span>\n'})}))}),queryWeights:Object.assign({},x.queryWeights,{items:x.query.items.map((function(t,o){return Object.assign({},t,{id:"Wq"+(o+1),val:"<span>\n          W<sub>Q"+(o+1)+"</sub>\n        </span>",position:[t.position[0],t.position[1]+75],lines:[{from:[t.lines[0].from[0],t.lines[0].from[1]+75],to:[t.lines[0].to[0],t.lines[0].to[1]+75],orientation:"vertical"},{from:[x.inputs.items[0].position[0]+50+10*(o+1),x.inputs.items[0].position[1]+50*(o+.5)],points:[[x.inputs.items[0].position[0]+50+10*(o+1),t.lines[0].from[1]+125+10*(o+1)],[t.lines[0].from[0],t.lines[0].from[1]+125+10*(o+1)]],to:[t.lines[0].from[0],t.lines[0].from[1]+125],color:g.queryWeights.borderColor,orientation:"multi-squared"}]})}))})}),v=Object.assign({},y,{zVal:Object.assign({},y.zVal,{items:[{position:[y.text.items[0].position[0]+525,582]},{name:"Z",namePosition:"top",position:[y.text.items[0].position[0]+550,582]},{position:[y.text.items[0].position[0]+575,582]},{position:[y.text.items[0].position[0]+525,607]},{position:[y.text.items[0].position[0]+550,607]},{position:[y.text.items[0].position[0]+575,607]}]}),ilVal:Object.assign({},y.ilVal,{items:[{position:[y.text.items[0].position[0]+400,582]},{name:"V",namePosition:"top",position:[y.text.items[0].position[0]+425,582]},{position:[y.text.items[0].position[0]+450,582]},{position:[y.text.items[0].position[0]+400,607]},{position:[y.text.items[0].position[0]+425,607]},{position:[y.text.items[0].position[0]+450,607]}]}),queVal:Object.assign({},y.queVal,{items:[{position:[y.text.items[0].position[0]+175,554]},{name:"Q",namePosition:"top",position:[y.text.items[0].position[0]+200,554]},{position:[y.text.items[0].position[0]+225,554]},{position:[y.text.items[0].position[0]+175,579]},{position:[y.text.items[0].position[0]+200,579]},{position:[y.text.items[0].position[0]+225,579]}]}),keyVal:Object.assign({},y.keyVal,{items:[{name:"K^T",namePosition:"top",position:[y.text.items[0].position[0]+300,543]},{position:[y.text.items[0].position[0]+325,543]},{position:[y.text.items[0].position[0]+300,568]},{position:[y.text.items[0].position[0]+325,568]},{position:[y.text.items[0].position[0]+300,593]},{position:[y.text.items[0].position[0]+325,593]}]}),text:Object.assign({},y.text,{items:[].concat(Object(a.a)(y.text.items),[{id:"softmax",val:'<span style="font-size: 24px">softmax</span>',sizeX:"100px",sizeY:"25px",borderColor:"transparent",position:[y.text.items[0].position[0]+25,593]},{id:"left-bracket",val:'<span style="font-size: 100px">(</span>',sizeX:"20px",sizeY:"100px",borderColor:"transparent",position:[y.text.items[0].position[0]+137.5,543]},{id:"right-bracket",val:'<span style="font-size: 100px">)</span>',sizeX:"20px",sizeY:"100px",borderColor:"transparent",position:[y.text.items[0].position[0]+362.5,543]},{id:"divider-bracket",val:'<div style=" width: 100%;"><div style="text-align: center; font-size: 20px; padding-top: 10px; width: 100%; border-top: 5px solid black;">'+l.renderToString("\\sqrt{d_k}")+"</div></div>",sizeX:"180px",sizeY:"38px",borderColor:"transparent",position:[y.text.items[0].position[0]+167.5,630.5]},{id:"equal",val:'<span style="font-size: 36px">=</span>',sizeX:"30px",sizeY:"25px",borderColor:"transparent",position:[y.text.items[0].position[0]+487.5,593]},{id:"title",val:'<span style="white-space: nowrap; font-size: 18px; text-align: left; width: 600px;">Self-attention calculation in matrix form, Source: Illustrated Transformer</span>',sizeX:"600px",sizeY:"25px",borderColor:"transparent",position:[y.text.items[0].position[0]+25,.68*700]}])})}),f={step1:g,step2:x,step3:y,step4:v},h=e("L/of"),_=e.n(h);o.a=function(){var t=Object(i.useState)(1),o=t[0],e=t[1],a=f["step"+o];return n.a.createElement("div",{className:_.a["attention-continaer"]},n.a.createElement(s.a,{data:a,step:o,animationHeight:700,animationWidth:1200,id:"attention-layer-diagram"}),n.a.createElement(r.a,{onStepForward:function(){e(o+1)},onStepBackward:function(){e(o-1)},prevDisabled:o<2,nextDisabled:o===Object.keys(f).length}))}}}]);
//# sourceMappingURL=4fe6dc47402f9c0f40f78cfd09ebae8865a0bdc1-70a1c3b4484847c61242.js.map